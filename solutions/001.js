const fetchUserInfo = () => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        name: '–ê–ª–µ–∫—Å –ê–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
        bio: '–°—Ç—Ä–æ—é –±—É–¥—É—â–µ–µ, –ø–æ –æ–¥–Ω–æ–º—É —Ü–∏–∫–ª—É –∑–∞ —Ä–∞–∑.',
      });
    }, 1000);
  });
};

const fetchUserTweets = () => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve([
        '–ö–æ–º–º–∏—á—É –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º. –ß—Ç–æ –º–æ–∂–µ—Ç –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫?',
        '–ë–∞–≥ –∏–ª–∏ —Ñ–∏—á–∞? ü§î #–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ - —ç—Ç–æ –∫–∞–∫ –∞—Ä—Ö–µ–æ–ª–æ–≥–∏—è.',
      ]);
    }, 1500);
  });
};

const fetchUserFollowers = () => {
  return new Promise((resolve) => {
    setTimeout(() => resolve(15000), 500);
  });
};

async function loadUserProfile() {
  const userInfo = await fetchUserInfo();
  console.log(`–ò–º—è: ${userInfo.name}`);
  console.log(`–ë–∏–æ: ${userInfo.bio}`);

  const userTweets = await fetchUserTweets();
  console.log(`–¢–≤–∏—Ç—ã: ${userTweets.map((element) => element)}`);

  const userFollowers = await fetchUserFollowers();
  console.log(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${userFollowers}`);
}

loadUserProfile();
